"""autogenerated by genmsg_py from ModulairUser.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import std_msgs.msg

class ModulairUser(roslib.message.Message):
  _md5sum = "0851abb9315f4937959d7febaa3b84c5"
  _type = "modulair_msgs/ModulairUser"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
uint8 modulair_id
string[] frame_names
geometry_msgs/Transform[] transforms
geometry_msgs/Vector3[] translations
geometry_msgs/Vector3[] translations_filtered
geometry_msgs/Vector3[] translations_mm
string workspace_state
string focus_state
bool leaving
bool joined
bool hands_together
bool hands_on_head
bool right_elbow_click
bool left_elbow_click
bool outside_workspace

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['header','modulair_id','frame_names','transforms','translations','translations_filtered','translations_mm','workspace_state','focus_state','leaving','joined','hands_together','hands_on_head','right_elbow_click','left_elbow_click','outside_workspace']
  _slot_types = ['Header','uint8','string[]','geometry_msgs/Transform[]','geometry_msgs/Vector3[]','geometry_msgs/Vector3[]','geometry_msgs/Vector3[]','string','string','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,modulair_id,frame_names,transforms,translations,translations_filtered,translations_mm,workspace_state,focus_state,leaving,joined,hands_together,hands_on_head,right_elbow_click,left_elbow_click,outside_workspace
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ModulairUser, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.modulair_id is None:
        self.modulair_id = 0
      if self.frame_names is None:
        self.frame_names = []
      if self.transforms is None:
        self.transforms = []
      if self.translations is None:
        self.translations = []
      if self.translations_filtered is None:
        self.translations_filtered = []
      if self.translations_mm is None:
        self.translations_mm = []
      if self.workspace_state is None:
        self.workspace_state = ''
      if self.focus_state is None:
        self.focus_state = ''
      if self.leaving is None:
        self.leaving = False
      if self.joined is None:
        self.joined = False
      if self.hands_together is None:
        self.hands_together = False
      if self.hands_on_head is None:
        self.hands_on_head = False
      if self.right_elbow_click is None:
        self.right_elbow_click = False
      if self.left_elbow_click is None:
        self.left_elbow_click = False
      if self.outside_workspace is None:
        self.outside_workspace = False
    else:
      self.header = std_msgs.msg._Header.Header()
      self.modulair_id = 0
      self.frame_names = []
      self.transforms = []
      self.translations = []
      self.translations_filtered = []
      self.translations_mm = []
      self.workspace_state = ''
      self.focus_state = ''
      self.leaving = False
      self.joined = False
      self.hands_together = False
      self.hands_on_head = False
      self.right_elbow_click = False
      self.left_elbow_click = False
      self.outside_workspace = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.modulair_id))
      length = len(self.frame_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.frame_names:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.transforms:
        _v1 = val1.translation
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.translations)
      buff.write(_struct_I.pack(length))
      for val1 in self.translations:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.translations_filtered)
      buff.write(_struct_I.pack(length))
      for val1 in self.translations_filtered:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.translations_mm)
      buff.write(_struct_I.pack(length))
      for val1 in self.translations_mm:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self.workspace_state
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.focus_state
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7B.pack(_x.leaving, _x.joined, _x.hands_together, _x.hands_on_head, _x.right_elbow_click, _x.left_elbow_click, _x.outside_workspace))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.modulair_id,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frame_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.frame_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v3 = val1.translation
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v4 = val1.rotation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.translations = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.translations.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.translations_filtered = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.translations_filtered.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.translations_mm = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.translations_mm.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.workspace_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.focus_state = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.leaving, _x.joined, _x.hands_together, _x.hands_on_head, _x.right_elbow_click, _x.left_elbow_click, _x.outside_workspace,) = _struct_7B.unpack(str[start:end])
      self.leaving = bool(self.leaving)
      self.joined = bool(self.joined)
      self.hands_together = bool(self.hands_together)
      self.hands_on_head = bool(self.hands_on_head)
      self.right_elbow_click = bool(self.right_elbow_click)
      self.left_elbow_click = bool(self.left_elbow_click)
      self.outside_workspace = bool(self.outside_workspace)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.modulair_id))
      length = len(self.frame_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.frame_names:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.transforms:
        _v5 = val1.translation
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.rotation
        _x = _v6
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.translations)
      buff.write(_struct_I.pack(length))
      for val1 in self.translations:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.translations_filtered)
      buff.write(_struct_I.pack(length))
      for val1 in self.translations_filtered:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.translations_mm)
      buff.write(_struct_I.pack(length))
      for val1 in self.translations_mm:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self.workspace_state
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.focus_state
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7B.pack(_x.leaving, _x.joined, _x.hands_together, _x.hands_on_head, _x.right_elbow_click, _x.left_elbow_click, _x.outside_workspace))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.modulair_id,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frame_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.frame_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v7 = val1.translation
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.rotation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.translations = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.translations.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.translations_filtered = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.translations_filtered.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.translations_mm = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.translations_mm.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.workspace_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.focus_state = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.leaving, _x.joined, _x.hands_together, _x.hands_on_head, _x.right_elbow_click, _x.left_elbow_click, _x.outside_workspace,) = _struct_7B.unpack(str[start:end])
      self.leaving = bool(self.leaving)
      self.joined = bool(self.joined)
      self.hands_together = bool(self.hands_together)
      self.hands_on_head = bool(self.hands_on_head)
      self.right_elbow_click = bool(self.right_elbow_click)
      self.left_elbow_click = bool(self.left_elbow_click)
      self.outside_workspace = bool(self.outside_workspace)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_7B = struct.Struct("<7B")
_struct_3I = struct.Struct("<3I")
_struct_B = struct.Struct("<B")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
